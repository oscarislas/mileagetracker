Tech Stack
==========

Infrastructure and Tooling
- Docker - containerization  
- Docker Compose - local orchestration (backend, frontend, db, migrations)  
- .env - environment config for backend, frontend, and Compose  
- Makefile - developer workflows (lint, test, run, migrate)  

Backend (Go)
- Go (>= 1.22) - main language  
- Air - hot reload
- Gin - HTTP framework  
- OpenAPI (oapi-codegen) - API specification, request validation, and code generation  
- GORM query builder for Postgres  
- Testify - testing framework (assertions, mocks)  
- golangci-lint - linting and static analysis  
- zap - structured logging  
- migrate - database migrations  
- context.Context - request-scoped cancellation and deadlines  

Frontend (React + TypeScript)
- React (with TypeScript) - UI framework  
- Vite - build tool and dev server  
- React Router - routing  
- React Query (TanStack Query) - data fetching, caching, sync with backend  
- OpenAPI TypeScript Generator - typed client code from backend spec  
- TailwindCSS - utility-first styling 
- catppuccin/tailwindcss - theme integration  
- eslint and prettier - linting and formatting  
- Jest and React Testing Library - unit and integration tests  
- Playwright - end-to-end browser tests  

Database
- Postgres - relational database  

Testing and QA
- Backend: Testify (unit and integration), optional dockertest for Postgres containers  
- Frontend: Jest and React Testing Library (unit and integration), Playwright (end-to-end)  
- Contract testing: OpenAPI spec used for backend code generation and frontend client generation  
- Healthz endpoints - liveness and readiness checks for containers
- Pre commit hooks to run tests  


Project basic structure:
backend/
├── cmd/
│   └── server/
│       └── main.go               # Application entrypoint
├── internal/                     # Application code (not importable outside module)
│   ├── api/                      # Delivery layer
│   │   ├── handlers/             # Gin handlers
│   │   ├── middleware/           # Auth, logging, CORS
│   │   ├── openapi/              # OpenAPI spec + generated code (oapi-codegen)
│   │   └── health/               # Healthz endpoints (liveness/readiness)
│   ├── config/                   # App configuration (env, flags, etc.)
│   ├── database/                 # DB connection + migrations runner
│   ├── domain/                   # Business models/entities
│   ├── repository/               # DB access (interfaces + implementation)
│   ├── service/                  # Business logic / use cases
│   ├── logger/                   # Structured logging (zap/zerolog)
│   └── tests/                    # Unit & integration tests
├── migrations/                   # SQL migrations
├── pkg/                          # Reusable libraries (if any, safe to import externally)
├── Makefile                      # Shortcuts (lint, test, run, migrate)
└── go.mod


Note: Add Makefile with shortcuts (make lint, make test, make run).

frontend/
├── public/                        # Static assets (favicon, index.html, etc.)
├── src/
│   ├── App.tsx                     # Root component
│   ├── index.tsx                   # Entry point (ReactDOM.render)
│   ├── routes.ts                   # Central route definitions
│   ├── pages/                      # Route-level components
│   │   └── Home.tsx
│   ├── components/                 # Reusable UI components
│   │   └── Button.tsx
│   ├── services/                   # API clients (generated + wrappers)
│   │   ├── apiClient.ts            # Axios/fetch wrapper
│   │   └── userService.ts          # Example service using OpenAPI typings
│   ├── hooks/                      # Custom hooks
│   │   └── useUsers.ts             # Example using React Query
│   ├── context/                    # React Context providers
│   │   └── UserContext.tsx
│   ├── styles/                     # Global styles + Tailwind setup
│   │   └── index.css
│   └── tests/                      # Unit + Playwright tests
│       ├── unit/                   # Component/unit tests
│       │   └── App.test.tsx
│       └── e2e/                    # E2E tests (Playwright)
├── tsconfig.json                   # TypeScript config
├── vite.config.ts                  # Build config (if using Vite)
├── package.json
└── .env                            # API URLs, env vars (e.g., VITE_API_URL)


   

